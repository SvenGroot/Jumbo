DataServer architecture:

DataServer main thread just loops and sleeps to send heartbeats to the NameServer.
A second thread is used to listen for client connections. Because large amounts of data
need to be transferred (and we will also want to do pipelining in the future) we won't
use remoting for this but just TcpListener (or Sockets if necessary).

When a client creates a file the nameserver creates a new block and assigns it to
several dataserver (depending on replication settings). For the initial implementation
we will assign it to just one dataserver and tell the client the block id and dataserver name.

The client will connect to the dataserver and send its data. When it finishes writing the data,
it tells the dataserver to commit it (probably using remoting). Probably at this point the
dataserver will have to contact the nameserver to see if writing to the block is allowed.

When the client finishes writing, it tells the nameserver the file is finished. For the moment,
our files will be read-only after that point.

For reading, the client will request the blocklist, then request a dataserver for the blocks,
then contact the dataserver to read the data.

The client library will use Stream derived classes.

For writing, the stream will collect data until it reaches a full block size or the stream
is closed. Then it spawns a thread to write that data to the server. When a new block is needed
the class will request the nameserver to allocate that block. When the stream is closed,
it will join the writer thread to wait until all data is written to the dataserver.